# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  systemd.services.NetworkManager-wait-online.enable = lib.mkForce false;
  systemd.services.systemd-networkd-wait-online.enable = lib.mkForce false;

  boot = {
    extraModulePackages = [];
    kernelModules = ["kvm-intel"];
    initrd = {
      kernelModules = [];
      availableKernelModules = ["xhci_pci" "thunderbolt" "vmd" "nvme" "usb_storage" "sd_mod" "rtsx_pci_sdmmc"];
      luks.devices."luks-b876dadf-218b-4634-87f4-8f62d6235364".device = "/dev/disk/by-uuid/b876dadf-218b-4634-87f4-8f62d6235364";
      verbose = false;
    };
    plymouth = {
      enable = true;
      theme = "lone";
      themePackages = [(pkgs.adi1090x-plymouth-themes.override {selected_themes = ["lone"];})];
    };
    loader.timeout = 0;
    kernelParams = [
      "quiet"
      "loglevel=3"
      "systemd.show_status=auto"
      "udev.log_level=3"
      "rd.udev.log_level=3"
      "vt.global_cursor_default=0"
    ];
    consoleLogLevel = 0;
  };

  fileSystems."/" = {
      device = "/dev/disk/by-uuid/4b16e873-66e5-46c0-a880-47b6f28a753a";
      fsType = "ext4";
    };

  boot.initrd.luks.devices."luks-16c3483f-1fd2-481e-a6ad-90ed6f4d1fa3".device = "/dev/disk/by-uuid/16c3483f-1fd2-481e-a6ad-90ed6f4d1fa3";

     fileSystems."/boot" = {
      device = "/dev/disk/by-uuid/E81C-D230";
      fsType = "vfat";
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/c2dfd031-442d-42fb-9f27-1d2a2a04a2be";}
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware = {
    cpu = {
      intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
    };
  nvidia = {
    # Modesetting is needed for most Wayland compositors
    modesetting.enable = true;

    # Use the open source version of the kernel module
    # Only available on driver 515.43.04+
    open = false;

    # Enable the nvidia settings menu
    nvidiaSettings = true;

    package = config.boot.kernelPackages.nvidiaPackages.stable;
  };

  # Enable graphics
    graphics = {
      enable = true;
      extraPackages = with pkgs; [intel-media-driver];
      enable32Bit = true;
    };
};
  #
  #  services.xserver.videoDrivers = ["nvidia"];
  #  hardware.nvidia = {
  #    package = config.boot.kernelPackages.nvidiaPackages.production; # (installs 535)
  #    modesetting.enable = true;
  #    # Nvidia power management. Experimental, and can cause sleep/suspend to fail.
  #    # Enable this if you have graphical corruption issues or application crashes after waking
  #    # up from sleep. This fixes it by saving the entire VRAM memory to /tmp/ instead
  #    # of just the bare essentials.
  #    powerManagement.enable = false;
  #    # Fine-grained power management. Turns off GPU when not in use.
  #    # Experimental and only works on modern Nvidia GPUs (Turing or newer).
  #    powerManagement.finegrained = true;
  #    # Use the NVidia open source kernel module (not to be confused with the
  #    # independent third-party "nouveau" open source driver).
  #    # Support is limited to the Turing and later architectures. Full list of
  #    # supported GPUs is at:
  #    # https://github.com/NVIDIA/open-gpu-kernel-modules#compatible-gpus
  #    # Only available from driver 515.43.04+
  #    # Currently alpha-quality/buggy, so false is currently the recommended setting.
  #    open = false;
  #
  #    # Enable the Nvidia settings menu,
  #    # accessible via `nvidia-settings`.
  #    nvidiaSettings = true;
  #
  #    prime = {
  #      #sync.enable = true;
  #      offload = {
  #        enable = true;
  #        enableOffloadCmd = true;
  #      };
  #      nvidiaBusId = "PCI:01:00:0"; # Found with lspci | grep VGA
  #      intelBusId = "PCI:00:02:0"; # Found with lspci | grep VGA
  #    };
  #  };
}
